/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysqldbcomparison;

/**
 *
 * @author rajib
 */

import com.mysql.jdbc.jdbc2.optional.*;
import java.sql.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFrame;

public class MySQLDatabaseComparisonJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MySQLDatabaseComparisonJFrame
     */
    public MySQLDatabaseComparisonJFrame() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_MySQLDBComparison = new javax.swing.JPanel();
        jLabel_Host_Name = new javax.swing.JLabel();
        jTextField_Host_Name = new javax.swing.JTextField();
        jLabel_Port = new javax.swing.JLabel();
        jTextField_Port = new javax.swing.JTextField();
        jLabel_User_Name = new javax.swing.JLabel();
        jTextField_User_Name = new javax.swing.JTextField();
        jLabel_Password = new javax.swing.JLabel();
        jPasswordField_DB_Password = new javax.swing.JPasswordField();
        jLabel_Source_DB = new javax.swing.JLabel();
        jTextField_Source_DB = new javax.swing.JTextField();
        jLabel_Destination_DB = new javax.swing.JLabel();
        jTextField_Destination_DB = new javax.swing.JTextField();
        jButton_Show_Object_Count = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Object_Count = new javax.swing.JTable();
        jButton_Show_Tables_not_in_Destination_DB = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_Tables_not_in_Destination_DB = new javax.swing.JTable();
        jButton_Show_Tables_not_in_Source_DB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Tables_not_in_Source_DB = new javax.swing.JTable();
        jButton_Show_Differences_in_Columns = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_Differences_in_Columns = new javax.swing.JTable();
        jButton_Show_Routines_not_in_Destination_DB = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_Routines_not_in_Source_DB = new javax.swing.JTable();
        jButton_Show_Routines_not_in_Source_DB = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable_Routines_not_in_Destination_DB = new javax.swing.JTable();
        jButton_Show_Differences_in_Procedures = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable_Differences_in_Procedures = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel_MySQLDBComparison.setBackground(new java.awt.Color(102, 102, 102));
        jPanel_MySQLDBComparison.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true), "MySQL Database Comparison Tool", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 36), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel_MySQLDBComparison.setForeground(new java.awt.Color(255, 255, 255));

        jLabel_Host_Name.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Host_Name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Host_Name.setText("Host Name ");

        jLabel_Port.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Port.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Port.setText("Port");

        jLabel_User_Name.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_User_Name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_User_Name.setText("User Name");

        jLabel_Password.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Password.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Password.setText("Password");

        jLabel_Source_DB.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Source_DB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Source_DB.setText("Source DB");

        jLabel_Destination_DB.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Destination_DB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Destination_DB.setText("Destination DB");

        jButton_Show_Object_Count.setText("Show Object Count");
        jButton_Show_Object_Count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Object_CountActionPerformed(evt);
            }
        });

        jTable_Object_Count.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DB", "Object Type", "Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Object_Count.setColumnSelectionAllowed(true);
        jTable_Object_Count.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable_Object_Count);
        jTable_Object_Count.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Tables_not_in_Destination_DB.setText("Show Tables not in Destination DB");
        jButton_Show_Tables_not_in_Destination_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Tables_not_in_Destination_DBActionPerformed(evt);
            }
        });

        jTable_Tables_not_in_Destination_DB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tables not in Destination DB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Tables_not_in_Destination_DB.setColumnSelectionAllowed(true);
        jTable_Tables_not_in_Destination_DB.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable_Tables_not_in_Destination_DB);
        jTable_Tables_not_in_Destination_DB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Tables_not_in_Source_DB.setText("Show Tables not in Source DB");
        jButton_Show_Tables_not_in_Source_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Tables_not_in_Source_DBActionPerformed(evt);
            }
        });

        jTable_Tables_not_in_Source_DB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tables not in Source DB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Tables_not_in_Source_DB.setColumnSelectionAllowed(true);
        jTable_Tables_not_in_Source_DB.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable_Tables_not_in_Source_DB);
        jTable_Tables_not_in_Source_DB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Differences_in_Columns.setText("Show Differences in Columns");
        jButton_Show_Differences_in_Columns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Differences_in_ColumnsActionPerformed(evt);
            }
        });

        jTable_Differences_in_Columns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S_TABLE_NAME", "S_COLUMN_NAME", "S_ORDINAL_POSITION", "S_COLUMN_DEFAULT", "S_IS_NULLABLE", "S_NUMERIC_PRECISION", "S_COLLATION_NAME", "S_COLUMN_TYPE", "S_COLUMN_KEY", "D_TABLE_NAME", "D_COLUMN_NAME", "D_ORDINAL_POSITION", "D_COLUMN_DEFAULT", "D_IS_NULLABLE", "D_NUMERIC_PRECISION", "D_COLLATION_NAME", "D_COLUMN_TYPE", "D_COLUMN_KEY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Differences_in_Columns.setColumnSelectionAllowed(true);
        jTable_Differences_in_Columns.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTable_Differences_in_Columns);
        jTable_Differences_in_Columns.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Routines_not_in_Destination_DB.setText("Show Routines not in Destination DB");
        jButton_Show_Routines_not_in_Destination_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Routines_not_in_Destination_DBActionPerformed(evt);
            }
        });

        jTable_Routines_not_in_Source_DB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Routines not in Source DB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Routines_not_in_Source_DB.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable_Routines_not_in_Source_DB);
        jTable_Routines_not_in_Source_DB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Routines_not_in_Source_DB.setText("Show Routines not in Source DB");
        jButton_Show_Routines_not_in_Source_DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Routines_not_in_Source_DBActionPerformed(evt);
            }
        });

        jTable_Routines_not_in_Destination_DB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Routines not in Destination DB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Routines_not_in_Destination_DB.setColumnSelectionAllowed(true);
        jTable_Routines_not_in_Destination_DB.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTable_Routines_not_in_Destination_DB);
        jTable_Routines_not_in_Destination_DB.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton_Show_Differences_in_Procedures.setText("Show Differences in Procedures");
        jButton_Show_Differences_in_Procedures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_Differences_in_ProceduresActionPerformed(evt);
            }
        });

        jTable_Differences_in_Procedures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Definition at Source", "Definition at Destination"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Differences_in_Procedures.setColumnSelectionAllowed(true);
        jTable_Differences_in_Procedures.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jTable_Differences_in_Procedures);
        jTable_Differences_in_Procedures.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel_MySQLDBComparisonLayout = new javax.swing.GroupLayout(jPanel_MySQLDBComparison);
        jPanel_MySQLDBComparison.setLayout(jPanel_MySQLDBComparisonLayout);
        jPanel_MySQLDBComparisonLayout.setHorizontalGroup(
            jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_MySQLDBComparisonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_MySQLDBComparisonLayout.createSequentialGroup()
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Host_Name, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_Port, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_User_Name, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_Password, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_Source_DB, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_Destination_DB, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_Host_Name)
                            .addComponent(jTextField_Port)
                            .addComponent(jTextField_User_Name)
                            .addComponent(jPasswordField_DB_Password)
                            .addComponent(jTextField_Source_DB)
                            .addComponent(jTextField_Destination_DB, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_Show_Object_Count, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Show_Tables_not_in_Destination_DB, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_Show_Tables_not_in_Source_DB, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton_Show_Differences_in_Columns, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_MySQLDBComparisonLayout.createSequentialGroup()
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_Show_Routines_not_in_Destination_DB, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Show_Routines_not_in_Source_DB, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton_Show_Differences_in_Procedures, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7))
                .addGap(17, 17, 17))
        );

        jPanel_MySQLDBComparisonLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel_Destination_DB, jLabel_Host_Name, jLabel_Password, jLabel_Port, jLabel_Source_DB, jLabel_User_Name});

        jPanel_MySQLDBComparisonLayout.setVerticalGroup(
            jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_MySQLDBComparisonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Host_Name)
                    .addComponent(jTextField_Host_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Show_Object_Count)
                    .addComponent(jButton_Show_Tables_not_in_Destination_DB)
                    .addComponent(jButton_Show_Tables_not_in_Source_DB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_MySQLDBComparisonLayout.createSequentialGroup()
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Port)
                            .addComponent(jTextField_Port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_User_Name)
                            .addComponent(jTextField_User_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Password)
                            .addComponent(jPasswordField_DB_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Source_DB)
                            .addComponent(jTextField_Source_DB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_Destination_DB)
                            .addComponent(jTextField_Destination_DB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton_Show_Differences_in_Columns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Show_Routines_not_in_Destination_DB)
                    .addComponent(jButton_Show_Routines_not_in_Source_DB))
                .addGap(8, 8, 8)
                .addGroup(jPanel_MySQLDBComparisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton_Show_Differences_in_Procedures)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel_MySQLDBComparisonLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel_Destination_DB, jLabel_Host_Name, jLabel_Password, jLabel_Port, jLabel_Source_DB, jLabel_User_Name});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_MySQLDBComparison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_MySQLDBComparison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1610, 980));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean hasUserFilledAllRequiredFieldsForDatabaseConnection(){
        
        JFrame frame = new JFrame("JOptionPane showMessageDialog required data");
        
        if(jTextField_Host_Name.getText().isEmpty()){
            JOptionPane.showMessageDialog(frame, "Host name is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }else if(jTextField_Port.getText().isEmpty()){
            JOptionPane.showMessageDialog(frame, "Port number is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }else if(jTextField_User_Name.getText().isEmpty()){
            JOptionPane.showMessageDialog(frame, "User is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }else if(new String(jPasswordField_DB_Password.getPassword()).isEmpty()){
            JOptionPane.showMessageDialog(frame, "Password is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }
        
        return true;
    }
    
    private boolean hasUserProvidedSourceAndDestinationDatabase(){
        JFrame frame = new JFrame("JOptionPane showMessageDialog required data");
        
        if(jTextField_Source_DB.getText().isEmpty()){
            JOptionPane.showMessageDialog(frame, "Source database is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }else if(jTextField_Destination_DB.getText().isEmpty()){
            JOptionPane.showMessageDialog(frame, "Destination Database is required!", "Warning Message", JOptionPane.WARNING_MESSAGE);
            
            return false;
        }
        
        return true;
    }
    
    private Connection getDatabaseConnection(){
        if(!hasUserFilledAllRequiredFieldsForDatabaseConnection()){
            return null;
        }
        
        MysqlDataSource dataSource = new MysqlDataSource();
        dataSource.setServerName(jTextField_Host_Name.getText()); //38.127.68.61
        dataSource.setPort(Integer.parseInt(jTextField_Port.getText()));
        dataSource.setUser(jTextField_User_Name.getText());

        char[] pwd = jPasswordField_DB_Password.getPassword();

        dataSource.setPassword(new String(pwd));
        
        try {
            return dataSource.getConnection();
        } catch (SQLException ex) {
            //Logger.getLogger(MySQLAdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }

        return null;
    }
    
    private void jButton_Show_Object_CountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Object_CountActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT * FROM (";
                query = query + " SELECT TABLE_SCHEMA AS 'Database', 'Table' AS 'Object' , COUNT(*) AS 'Number of Object'";
                query = query + " FROM INFORMATION_SCHEMA.TABLES";
                query = query + " WHERE TABLE_SCHEMA IN ('" + sourceDatabase + "', '" + destinationDatabase +"')";
                query = query + " GROUP BY 1";
                query = query + " UNION ALL";
                query = query + " SELECT ROUTINE_SCHEMA AS 'Database', 'Routine' AS 'Object', COUNT(*) AS 'Number of Object'";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA IN ('" + sourceDatabase + "', '" + destinationDatabase +"')";
                query = query + " GROUP BY 1";
                query = query + " UNION ALL";
                query = query + " SELECT CONSTRAINT_SCHEMA AS 'Database', CONSTRAINT_TYPE AS 'Object', COUNT(*) AS 'Number of Object'";
                query = query + " FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS";
                query = query + " WHERE CONSTRAINT_SCHEMA IN ('" + sourceDatabase + "', '" + destinationDatabase +"')";
                query = query + " GROUP BY 1, 2";
                query = query + " ) a";
                query = query + " ORDER BY 2, 1;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Object_Count.getModel();

                int rowCount = model.getRowCount();

                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;

                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Object_CountActionPerformed

    private void jButton_Show_Tables_not_in_Destination_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Tables_not_in_Destination_DBActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT a.TABLE_NAME";
                query = query + " FROM";
                query = query + " (";
                query = query + " SELECT TABLE_NAME";
                query = query + " FROM INFORMATION_SCHEMA.TABLES";
                query = query + " WHERE TABLE_SCHEMA = '"+ sourceDatabase +"'";
                query = query + " ) a";
                query = query + " LEFT JOIN";
                query = query + " (";
                query = query + " SELECT TABLE_NAME";
                query = query + " FROM INFORMATION_SCHEMA.TABLES";
                query = query + " WHERE TABLE_SCHEMA = '"+ destinationDatabase +"'";
                query = query + " ) b ON a.TABLE_NAME = b.TABLE_NAME";
                query = query + " WHERE b.TABLE_NAME IS NULL";
                query = query + " ORDER BY a.TABLE_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Tables_not_in_Destination_DB.getModel();

                int rowCount = model.getRowCount();

                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;

                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Tables_not_in_Destination_DBActionPerformed

    private void jButton_Show_Tables_not_in_Source_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Tables_not_in_Source_DBActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT a.TABLE_NAME";
                query = query + " FROM";
                query = query + " (";
                query = query + " SELECT TABLE_NAME";
                query = query + " FROM INFORMATION_SCHEMA.TABLES";
                query = query + " WHERE TABLE_SCHEMA = '"+ destinationDatabase +"'";
                query = query + " ) a";
                query = query + " LEFT JOIN";
                query = query + " (";
                query = query + " SELECT TABLE_NAME";
                query = query + " FROM INFORMATION_SCHEMA.TABLES";
                query = query + " WHERE TABLE_SCHEMA = '"+ sourceDatabase +"'";
                query = query + " ) b ON a.TABLE_NAME = b.TABLE_NAME";
                query = query + " WHERE b.TABLE_NAME IS NULL";
                query = query + " ORDER BY a.TABLE_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Tables_not_in_Source_DB.getModel();

                int rowCount = model.getRowCount();

                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;

                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Tables_not_in_Source_DBActionPerformed

    private void jButton_Show_Differences_in_ColumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Differences_in_ColumnsActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT tb1.*, tb2.* ";
                query = query + "FROM ";
                query = query + "( ";
                query = query + "SELECT c.* ";
                query = query + "FROM ";
                query = query + "( ";
                query = query + "SELECT TABLE_NAME ";
                query = query + "FROM INFORMATION_SCHEMA.TABLES ";
                query = query + "WHERE TABLE_SCHEMA = '"+ sourceDatabase +"' ";
                query = query + ") a ";
                query = query + "INNER JOIN ";
                query = query + "( ";
                query = query + "SELECT TABLE_NAME ";
                query = query + "FROM INFORMATION_SCHEMA.TABLES ";
                query = query + "WHERE TABLE_SCHEMA = '"+ destinationDatabase +"' ";
                query = query + ") b ON a.TABLE_NAME = b.TABLE_NAME ";
                query = query + "INNER JOIN ";
                query = query + "( ";
                query = query + "SELECT ";
                query = query + "TABLE_NAME ";
                query = query + ", COLUMN_NAME ";
                query = query + ", ORDINAL_POSITION ";
                query = query + ", COLUMN_DEFAULT ";
                query = query + ", IS_NULLABLE ";
                query = query + ", NUMERIC_PRECISION ";
                query = query + ", COLLATION_NAME ";
                query = query + ", COLUMN_TYPE ";
                query = query + ", COLUMN_KEY ";
                query = query + "FROM INFORMATION_SCHEMA.COLUMNS ";
                query = query + "WHERE TABLE_SCHEMA = '"+ sourceDatabase +"' ";
                query = query + ") c ON a.TABLE_NAME = c.TABLE_NAME ";
                query = query + ") tb1 ";
                query = query + "LEFT JOIN ";
                query = query + "( ";
                query = query + "SELECT c.* ";
                query = query + "FROM ";
                query = query + "( ";
                query = query + "SELECT TABLE_NAME ";
                query = query + "FROM INFORMATION_SCHEMA.TABLES ";
                query = query + "WHERE TABLE_SCHEMA = '"+ sourceDatabase +"' ";
                query = query + ") a ";
                query = query + "INNER JOIN ";
                query = query + "( ";
                query = query + "SELECT TABLE_NAME ";
                query = query + "FROM INFORMATION_SCHEMA.TABLES ";
                query = query + "WHERE TABLE_SCHEMA = '"+ destinationDatabase +"' ";
                query = query + ") b ON a.TABLE_NAME = b.TABLE_NAME ";
                query = query + "INNER JOIN ";
                query = query + "( ";
                query = query + "SELECT ";
                query = query + "TABLE_NAME ";
                query = query + ", COLUMN_NAME ";
                query = query + ", ORDINAL_POSITION ";
                query = query + ", COLUMN_DEFAULT ";
                query = query + ", IS_NULLABLE ";
                query = query + ", NUMERIC_PRECISION ";
                query = query + ", COLLATION_NAME ";
                query = query + ", COLUMN_TYPE ";
                query = query + ", COLUMN_KEY ";
                query = query + "FROM INFORMATION_SCHEMA.COLUMNS ";
                query = query + "WHERE TABLE_SCHEMA = '"+ destinationDatabase +"' ";
                query = query + ") c ON a.TABLE_NAME = c.TABLE_NAME ";
                query = query + ") tb2 ON tb1.TABLE_NAME = tb2.TABLE_NAME AND tb1.COLUMN_NAME = tb2.COLUMN_NAME ";
                query = query + "WHERE (tb1.ORDINAL_POSITION <> tb2.ORDINAL_POSITION) ";
                query = query + "OR (tb1.COLUMN_DEFAULT <> tb2.COLUMN_DEFAULT) ";
                query = query + "OR (tb1.IS_NULLABLE <> tb2.IS_NULLABLE) ";
                query = query + "OR (tb1.NUMERIC_PRECISION <> tb2.NUMERIC_PRECISION) ";
                query = query + "OR (tb1.COLUMN_TYPE <> tb2.COLUMN_TYPE) ";
                query = query + "OR (tb1.COLUMN_KEY <> tb2.COLUMN_KEY) ";
                query = query + "ORDER BY tb1.TABLE_NAME, tb1.COLUMN_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Differences_in_Columns.getModel();

                int rowCount = model.getRowCount();
                
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;
                
                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }
                    
                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Differences_in_ColumnsActionPerformed

    private void jButton_Show_Routines_not_in_Destination_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Routines_not_in_Destination_DBActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT a.ROUTINE_NAME, a.ROUTINE_TYPE";
                query = query + " FROM";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_TYPE";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ sourceDatabase +"'";
                query = query + " ) a";
                query = query + " LEFT JOIN";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_TYPE";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ destinationDatabase +"'";
                query = query + " ) b ON a.ROUTINE_NAME = b.ROUTINE_NAME AND a.ROUTINE_TYPE = b.ROUTINE_TYPE";
                query = query + " WHERE b.ROUTINE_NAME IS NULL";
                query = query + " ORDER BY a.ROUTINE_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Routines_not_in_Destination_DB.getModel();

                int rowCount = model.getRowCount();
                
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }
                
                Vector<String> row;
                
                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Routines_not_in_Destination_DBActionPerformed

    private void jButton_Show_Routines_not_in_Source_DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Routines_not_in_Source_DBActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT a.ROUTINE_NAME, a.ROUTINE_TYPE";
                query = query + " FROM";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_TYPE";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ destinationDatabase +"'";
                query = query + " ) a";
                query = query + " LEFT JOIN";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_TYPE";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ sourceDatabase +"'";
                query = query + " ) b ON a.ROUTINE_NAME = b.ROUTINE_NAME AND a.ROUTINE_TYPE = b.ROUTINE_TYPE";
                query = query + " WHERE b.ROUTINE_NAME IS NULL";
                query = query + " ORDER BY a.ROUTINE_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Routines_not_in_Source_DB.getModel();

                int rowCount = model.getRowCount();

                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;

                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Routines_not_in_Source_DBActionPerformed

    private void jButton_Show_Differences_in_ProceduresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_Differences_in_ProceduresActionPerformed
        try{
            Connection conn = getDatabaseConnection();
            
            if(conn != null){
                if(!hasUserProvidedSourceAndDestinationDatabase())
                    return;
                
                Statement stmt = conn.createStatement();

                String sourceDatabase = jTextField_Source_DB.getText();
                String destinationDatabase = jTextField_Destination_DB.getText();

                String query = "SELECT a.*, b.Definition_at_destination";
                query = query + " FROM";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_DEFINITION AS 'Definition_at_source'";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ sourceDatabase +"'";
                query = query + " ) a";
                query = query + " INNER JOIN";
                query = query + " (";
                query = query + " SELECT ROUTINE_NAME, ROUTINE_DEFINITION AS 'Definition_at_destination'";
                query = query + " FROM INFORMATION_SCHEMA.ROUTINES";
                query = query + " WHERE ROUTINE_SCHEMA = '"+ destinationDatabase +"'";
                query = query + " ) b ON a.ROUTINE_NAME = b.ROUTINE_NAME";
                query = query + " WHERE a.Definition_at_source <> b.Definition_at_destination";
                query = query + " ORDER BY a.ROUTINE_NAME;";

                ResultSet rs = stmt.executeQuery(query);

                ResultSetMetaData rsmt = rs.getMetaData();

                int columnCount = rsmt.getColumnCount();

                DefaultTableModel model = (DefaultTableModel)jTable_Differences_in_Procedures.getModel();

                int rowCount = model.getRowCount();

                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                Vector<String> row;

                while(rs.next()){
                    row = new Vector<String>(columnCount);
                    for(int i = 1; i <= columnCount; i++){
                        row.add(rs.getString(i));
                    }

                    model.addRow(row);
                }

                rs.close();
                stmt.close();
                conn.close();
            }
        }catch(Exception ex){
            JFrame frame = new JFrame("JOptionPane showMessageDialog example");
            JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_Show_Differences_in_ProceduresActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MySQLDatabaseComparisonJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MySQLDatabaseComparisonJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MySQLDatabaseComparisonJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MySQLDatabaseComparisonJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MySQLDatabaseComparisonJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Show_Differences_in_Columns;
    private javax.swing.JButton jButton_Show_Differences_in_Procedures;
    private javax.swing.JButton jButton_Show_Object_Count;
    private javax.swing.JButton jButton_Show_Routines_not_in_Destination_DB;
    private javax.swing.JButton jButton_Show_Routines_not_in_Source_DB;
    private javax.swing.JButton jButton_Show_Tables_not_in_Destination_DB;
    private javax.swing.JButton jButton_Show_Tables_not_in_Source_DB;
    private javax.swing.JLabel jLabel_Destination_DB;
    private javax.swing.JLabel jLabel_Host_Name;
    private javax.swing.JLabel jLabel_Password;
    private javax.swing.JLabel jLabel_Port;
    private javax.swing.JLabel jLabel_Source_DB;
    private javax.swing.JLabel jLabel_User_Name;
    private javax.swing.JPanel jPanel_MySQLDBComparison;
    private javax.swing.JPasswordField jPasswordField_DB_Password;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable_Differences_in_Columns;
    private javax.swing.JTable jTable_Differences_in_Procedures;
    private javax.swing.JTable jTable_Object_Count;
    private javax.swing.JTable jTable_Routines_not_in_Destination_DB;
    private javax.swing.JTable jTable_Routines_not_in_Source_DB;
    private javax.swing.JTable jTable_Tables_not_in_Destination_DB;
    private javax.swing.JTable jTable_Tables_not_in_Source_DB;
    private javax.swing.JTextField jTextField_Destination_DB;
    private javax.swing.JTextField jTextField_Host_Name;
    private javax.swing.JTextField jTextField_Port;
    private javax.swing.JTextField jTextField_Source_DB;
    private javax.swing.JTextField jTextField_User_Name;
    // End of variables declaration//GEN-END:variables
}
